<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kinegratii的博客</title>
  <subtitle>你说有一日总会名扬天下实现你抱负</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kinegratii.github.io/"/>
  <updated>2016-12-02T14:30:47.129Z</updated>
  <id>http://kinegratii.github.io/</id>
  
  <author>
    <name>Kinegratii</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ionic2杂记</title>
    <link href="http://kinegratii.github.io/2016/12/02/learning-ionic2/"/>
    <id>http://kinegratii.github.io/2016/12/02/learning-ionic2/</id>
    <published>2016-12-02T13:01:17.000Z</published>
    <updated>2016-12-02T14:30:47.129Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些个人使用ionic2过程中的感受和碰到的问题。<br><a id="more"></a></p>
<h2 id="1-技能链"><a href="#1-技能链" class="headerlink" title="1 技能链"></a>1 技能链</h2><blockquote>
<p>Typescript –&gt; Angular2 –&gt; ionic2</p>
</blockquote>
<p>ionic2是基于Angular2开发，Angular2是使用Typescript重新改写的。Typescript是Javascript类型的超集。学习之前先列出相关中文文档。</p>
<ul>
<li><a href="http://www.tslang.cn/" target="_blank" rel="external">Typescript中文网</a></li>
<li><a href="https://angular.cn/docs/ts/latest/quickstart.html" target="_blank" rel="external">Angular2中文文档</a></li>
<li><a href="https://yanxiaodi.gitbooks.io/ionic2-guide/content/" target="_blank" rel="external">ionic2</a></li>
</ul>
<h2 id="2-Typescript"><a href="#2-Typescript" class="headerlink" title="2 Typescript"></a>2 Typescript</h2><p>和Javascript相比，在函数、接口、类、泛型都有很大的变化，总的来说，会使得程序更加明确，加强了面向对象的一些设计规范。</p>
<h2 id="3-第三方js库与d-ts声明文件"><a href="#3-第三方js库与d-ts声明文件" class="headerlink" title="3 第三方js库与d.ts声明文件"></a>3 第三方js库与d.ts声明文件</h2><p>对于现有第三方js库，根据不同情况采取不同的策略。</p>
<ul>
<li>下载d.ts声明文件</li>
<li>自己编写d.ts声明文件</li>
<li>实现对应TypeScript的版本</li>
</ul>
<p>一些常用库诸如<code>underscope.js</code>可在github下载到对应的d.ts文件。</p>
<p><a href="https://github.com/mumuy/relationship" target="_blank" rel="external">中国家庭称谓计算器</a>，该API项目逻辑复杂，但是接口只有一个，可以自己编写。以下是本人编写的相应d.ts文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">interface RelationshipOptions &#123;</div><div class="line">	<span class="attr">text</span>:string;</div><div class="line">	sex:number;</div><div class="line">	type:string;</div><div class="line">	reverse?:boolean;</div><div class="line">&#125;</div><div class="line">declare <span class="function"><span class="keyword">function</span> <span class="title">relationship</span>(<span class="params">relationshipOptions:RelationshipOptions</span>):<span class="title">string</span>;</span></div></pre></td></tr></table></figure>
<p>使用方式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// &lt;reference path="relationship.d.ts" /&gt;</span></div><div class="line"><span class="keyword">import</span> relationship = <span class="built_in">require</span>(<span class="string">'./relationship'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> s = relationship(&#123;</div><div class="line">	<span class="attr">text</span>:<span class="string">'爸爸的弟弟'</span>,</div><div class="line">	<span class="attr">sex</span>:<span class="number">1</span>,</div><div class="line">	<span class="attr">type</span>:<span class="string">'default'</span>,</div><div class="line">	<span class="attr">reverse</span>:<span class="literal">true</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(s); <span class="comment">//侄子</span></div></pre></td></tr></table></figure>
<p>而项目引用的另一个库<a href="http://blog.jjonline.cn/userInterFace/173.html" target="_blank" rel="external">《1900年至2100年公历、农历互转Js代码》</a>，API也比较简单，但ionic1项目中对其进行了比较多的扩展（日期加减），因此采用重写自己的Typescript版本。项目地址 <a href="https://github.com/kinegratii/ts-calendars。" target="_blank" rel="external">https://github.com/kinegratii/ts-calendars。</a></p>
<h2 id="4-版本与开发IDE"><a href="#4-版本与开发IDE" class="headerlink" title="4 版本与开发IDE"></a>4 版本与开发IDE</h2><p>目前ionic2版本为rc3，还未发布正式版，但按照版本规律，许多API已经稳定下来了，不像Beta的时候有项目布局那样大的改变，因此可以开始使用和迁移了。</p>
<p>习惯了JetBrain系列的IDE，因此使用WebStorm进行开发，当然是用VS Code也是大家极力推荐的。</p>
<h2 id="5-创建项目"><a href="#5-创建项目" class="headerlink" title="5 创建项目"></a>5 创建项目</h2><p>ionic2和ionic1相比，项目布局变化比较多，决定重新创建一个项目，不在原有的项目进行更改，使得一开始就符合ionic2的开发规范。</p>
<p>使用下面的命令行创建一个ionic2项目。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ionic start FamilyApp --v2</div></pre></td></tr></table></figure>
<p>默认使用tabs界面，创建了三个页面。</p>
<h2 id="6-页面"><a href="#6-页面" class="headerlink" title="6 页面"></a>6 页面</h2><p>使用以下命令创建新的页面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ionic generate page more</div></pre></td></tr></table></figure>
<p>在<code>src/pages/</code>创建以下三个文件。</p>
<ul>
<li><code>more/more.html</code> 模板文件</li>
<li><code>more/more.scss</code> css样式</li>
<li><code>more/more.ts</code> 组件代码</li>
</ul>
<p>并且将新页面加入模块<code>app.module.ts</code>文件中。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@NgModule(&#123;</div><div class="line">  declarations:[</div><div class="line">    # ...</div><div class="line">    MorePage,</div><div class="line">  ],</div><div class="line">  entryComponents:[</div><div class="line">    # ...</div><div class="line">    MorePage,</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="7-导航"><a href="#7-导航" class="headerlink" title="7 导航"></a>7 导航</h2><p>习惯先创建所有的页面，完成跳转逻辑，最后再写各个页面的逻辑。</p>
<p>ionic2的导航类似于Android，像一个简单的栈，可以进行push和remove操作。不使用url来决定导航，当然也可以这么做。</p>
<p><code>no component factory found for AboutPage</code></p>
<p>在刚使用导航（MorePage -&gt; AboutPage）时出现了这个错误，需要将AboutPage加到<code>app.module.ts</code>的<code>declarations</code>和<code>entryComponents</code>，两个都要添加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些个人使用ionic2过程中的感受和碰到的问题。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Typescript" scheme="http://kinegratii.github.io/tags/Typescript/"/>
    
      <category term="ionic2" scheme="http://kinegratii.github.io/tags/ionic2/"/>
    
  </entry>
  
  <entry>
    <title>Django实践：数据库查询</title>
    <link href="http://kinegratii.github.io/2016/11/18/django-models-practice/"/>
    <id>http://kinegratii.github.io/2016/11/18/django-models-practice/</id>
    <published>2016-11-18T12:43:57.000Z</published>
    <updated>2016-12-01T13:29:50.517Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结了一些Django数据库查询的实践经验。</p>
<ul>
<li>基本的增删改查</li>
<li>分类统计：<code>aggregate</code>和<code>annotate</code>的使用</li>
<li>实现按年/月/日统计</li>
<li>Manager和QuerySet的混合使用</li>
<li>编写迁移文件</li>
</ul>
<a id="more"></a>
<h2 id="1概述"><a href="#1概述" class="headerlink" title="1概述"></a>1概述</h2><p>根据<a href="https://docs.djangoproject.com/en/1.10/" target="_blank" rel="external">Django官方文档</a>，本人整理出与数据库相关的话题列表，</p>
<ul>
<li>基本的增删改查</li>
<li>外键访问 (Accessing related objects)</li>
<li>管理器和查询集 (Manger &amp; QuerySet)</li>
<li>原生SQL (raw SQL)</li>
<li>事务 (Transactions)</li>
<li>统计、聚合和分组 (Aggregation)</li>
<li>搜索 (Search)</li>
<li>自定义字段 (Custom fields)</li>
<li>多数据库 (Multiple databases )</li>
<li>查询表达式和自定义查询表达式(Lookup expressions &amp; Custom lookups)</li>
<li>条件表达式 (Conditional Expressions)</li>
<li>数据库函数 (Database Functions)</li>
<li>数据库优化 (Optimize database access)</li>
<li>数据库迁移 (Migrations)</li>
</ul>
<p>其中一部分是在数据库有对应的内容，另外一部分则是Django框架自有的特性。涉及的代码主要包括以下三个包：</p>
<ul>
<li><code>django.db.connections</code>: 底层数据库连接对象操作</li>
<li><code>django.db.migrations</code>:  迁移相关</li>
<li><code>django.db.models</code>: 模型定义、数据库查询</li>
</ul>
<h2 id="2-查询API"><a href="#2-查询API" class="headerlink" title="2 查询API"></a>2 查询API</h2><h3 id="2-1-模型描述"><a href="#2-1-模型描述" class="headerlink" title="2.1 模型描述"></a>2.1 模型描述</h3><p>以一个设备管理系统的简易系统为例，该项目包含了设备描述和报警记录。</p>
<ul>
<li>设备以序列号唯一确定该设备，可默认为“主键”。</li>
<li><code>longitude</code>  <code>latitude</code>和<code>address</code>表示设备的地理位置，创建后可认为不可更改。</li>
<li>设备含有使用和报警两个状态标识变量。</li>
<li><code>Alarm.catalog</code>表示警报类型，定义在choices上。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Device(models.Model):</div><div class="line">    serial = models.CharField(verbose_name=&apos;序列号&apos;, max_length=100, unique=True)</div><div class="line">    name = models.CharField(verbose_name=&apos;名称&apos;, max_length=100, null=True, blank=True)</div><div class="line">    longitude = models.FloatField(verbose_name=&apos;经度&apos;, null=True,</div><div class="line">                                  validators=[validators.MaxValueValidator(180), validators.MinValueValidator(-180)])</div><div class="line">    latitude = models.FloatField(verbose_name=&apos;纬度&apos;, null=True,</div><div class="line">                                 validators=[validators.MaxValueValidator(90), validators.MinValueValidator(-90)])</div><div class="line">    address = models.CharField(verbose_name=&apos;地址&apos;, max_length=100, null=True)</div><div class="line">    is_active = models.BooleanField(verbose_name=&apos;使用标识&apos;, default=True)</div><div class="line">    is_alarm = models.BooleanField(verbose_name=&apos;报警标识&apos;, default=False)</div><div class="line">    latest_alarm_time = models.DateTimeField(verbose_name=&apos;最新报警时间&apos;, null=True, blank=True)</div><div class="line">    latest_alarm_remark = models.CharField(verbose_name=&apos;最新报警内容&apos;, max_length=200, null=True, blank=True)</div><div class="line">    def __str__(self):</div><div class="line">        return self.serial</div><div class="line"></div><div class="line">class Alarm(models.Model):</div><div class="line">    ALARM_CATALOG_CHOICES = (</div><div class="line">          (&apos;low_battery&apos;, &apos;低电量&apos;),</div><div class="line">          (&apos;fail_connection&apos;, &apos;通信故障&apos;),</div><div class="line">          (&apos;location_moved&apos;, &apos;位置移动&apos;)</div><div class="line">      )</div><div class="line">    device = models.ForeignKey(Device, verbose_name=&apos;设备&apos;)</div><div class="line">    create_time = models.DateTimeField(verbose_name=&apos;创建时间&apos;, default=timezone.now)</div><div class="line">    catalog = models.CharField(max_length=30, null=True, choices=ALARM_CATALOG_CHOICES)</div><div class="line">    content = models.CharField(verbose_name=&apos;内容&apos;, max_length=30, null=True, blank=True)</div><div class="line">    longitude = models.FloatField(verbose_name=&apos;经度&apos;, null=True,</div><div class="line">                                  validators=[validators.MaxValueValidator(180), validators.MinValueValidator(-180)])</div><div class="line">    latitude = models.FloatField(verbose_name=&apos;纬度&apos;, null=True,</div><div class="line">                                 validators=[validators.MaxValueValidator(90), validators.MinValueValidator(-90)])</div><div class="line">    address = models.CharField(verbose_name=&apos;地址&apos;, max_length=100, null=True)</div><div class="line">    read = models.BooleanField(verbose_name=&apos;已读&apos;, default=False)</div></pre></td></tr></table></figure>
<h3 id="2-2-查询一览表"><a href="#2-2-查询一览表" class="headerlink" title="2.2 查询一览表"></a>2.2 查询一览表</h3><h4 id="2-2-1-检索、过滤、外键查询、分页"><a href="#2-2-1-检索、过滤、外键查询、分页" class="headerlink" title="2.2.1 检索、过滤、外键查询、分页"></a>2.2.1 检索、过滤、外键查询、分页</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 查询mac地址为&apos;0FFFFFFF561C4030&apos;的设备</div><div class="line">try:</div><div class="line">    device = models.Device.objects.get(serial=&apos;0FFFFFFF561C4030&apos;)</div><div class="line">except models.Device.DoesNotExist:</div><div class="line">    device = None</div><div class="line"></div><div class="line">&lt;Device:0FFFFFFF561C4030&gt;</div><div class="line"></div><div class="line"># 查询地址包含“小区”的设备。</div><div class="line">&gt;&gt;&gt; device_list = models.Device.objects.filter(address__icontains=&apos;小区&apos;)</div><div class="line">&lt;QuerySet [&lt;Device: 0FFFFFFF5BC91F87&gt;, &lt;Device: 0FFFFFFF561C4030&gt;, ...]&gt;</div><div class="line"></div><div class="line"># 查询设备&apos;0FFFFFFF5BC91F87&apos;的所有报警记录</div><div class="line">models.Alarm.objects.filter(device__serial=&apos;0FFFFFFF5BC91F87&apos;)</div><div class="line"></div><div class="line"># 假设设备列表每页20项，查询第3页的数据。</div><div class="line">device_list = models.Device.objects.all()[20:30]</div></pre></td></tr></table></figure>
<h4 id="2-2-2-更新"><a href="#2-2-2-更新" class="headerlink" title="2.2.2 更新"></a>2.2.2 更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 单记录更新</div><div class="line">try:</div><div class="line">    device = models.Device.objects.get(serial=&apos;0FFFFFFF561C4030&apos;)</div><div class="line">    device.is_active = False</div><div class="line">    device.save()</div><div class="line">except models.Device.DoesNotExist:</div><div class="line">    pass</div><div class="line"></div><div class="line"># 多记录更新</div><div class="line">models.Device.objects.filter(serial__in=[&apos;0FFFFFFF561C4030&apos;, &apos;0FFFFFFF56174CA0&apos;]).update(is_active=False)</div><div class="line"></div><div class="line"># 去掉所有设备地址中“福建省”的前缀，比如“福建省厦门市Xxxx”改为&quot;厦门市Xxxx&quot;。</div><div class="line">models.Device.objects.filter(address__isnull=False).update(address=F(&apos;address&apos;).strip(&apos;福建省&apos;))</div></pre></td></tr></table></figure>
<h4 id="2-2-3-删除"><a href="#2-2-3-删除" class="headerlink" title="2.2.3 删除"></a>2.2.3 删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 删除单条记录</div><div class="line">try:</div><div class="line">    device = models.Device.objects.get(serial=&apos;0FFFFFFF561C4030&apos;)</div><div class="line">    device.delete()</div><div class="line">except models.Device.DoesNotExist:</div><div class="line">    pass</div><div class="line"></div><div class="line"># 批量删除</div><div class="line">models.Alarm.objects.filter(serial=&apos;0FFFFFFF561C4030&apos;).delete()</div><div class="line"># 由于delete只是QuerySet的方法，并没有向Manager公开，需要先调用all方法</div><div class="line">models.Alarm.objects.all().delete() # OK</div><div class="line">models.Alarm.objects.delete() # Fail</div></pre></td></tr></table></figure>
<h4 id="2-2-4-基础统计"><a href="#2-2-4-基础统计" class="headerlink" title="2.2.4 基础统计"></a>2.2.4 基础统计</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># 计算设备0FFFFFFF561C4030所有的报警数目。</div><div class="line">models.Alarm.objects.filter(device__serial=&apos;0FFFFFFF561C4030&apos;).count()</div><div class="line"># 165</div><div class="line"></div><div class="line"># 计算每个设备的报警数目。</div><div class="line">&gt;&gt;&gt; device_list = models.Device.objects.annotate(num_alarms=Count(&apos;alarm&apos;))</div><div class="line">&gt;&gt;&gt; device_list</div><div class="line">&lt;QuerySet [&lt;Device: 0FFFFFFF561C4021&gt;, &lt;Device: 0FFFFFFF561C4030&gt;, ...]&gt;</div><div class="line">&gt;&gt;&gt; device_list [0].num_alarms</div><div class="line">34</div><div class="line"></div><div class="line"># 查询最近一个月报警次数最多的前5个设备。</div><div class="line">models.Alarm.objects.values(&apos;serial&apos;).annotate(num_alarms=models.Count(&apos;serial&apos;)).order_by(&apos;num_alarms&apos;)[:5]</div><div class="line"></div><div class="line">[</div><div class="line">&#123;&apos;serial&apos;:&apos;0FFFFFFF9FFC15F9&apos;, &apos;num_alarms&apos;:38&#125;,</div><div class="line">&#123;&apos;serial&apos;:&apos;0FFFFFFF71281152&apos;, &apos;num_alarms&apos;:32&#125;,</div><div class="line">&#123;&apos;serial&apos;:&apos;0FFFFFFF5992B723&apos;, &apos;num_alarms&apos;:27&#125;,</div><div class="line">&#123;&apos;serial&apos;:&apos;0FFFFFFF05E20356&apos;, &apos;num_alarms&apos;:21&#125;,</div><div class="line">&#123;&apos;serial&apos;:&apos;0FFFFFFF66DDF14D&apos;, &apos;num_alarms&apos;:12&#125;,</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="2-2-5-分类统计"><a href="#2-2-5-分类统计" class="headerlink" title="2.2.5 分类统计"></a>2.2.5 分类统计</h4><p>分类统计有以下两种方法。</p>
<ul>
<li><code>aggregate</code> + 条件表达式Case，返回一个字典形式的结果，未出现的分类值默认为None，需要使用<code>Coalesce</code>类设置默认值为0</li>
<li><code>annotate</code> + 分组GROUP BY，返回一个列表形式的结果，未出现的分类值不会出现在最后的结果中</li>
</ul>
<p>以查询最近30天中每个报警类型的报警数目为例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">latest_week_qs = models.Alarm.objects.filter(create_time__gt=timezone.now()-timedelta(days=30).</div><div class="line"># 查询每个报警类型的报警数目</div><div class="line">latest_week_qs.aggregate(</div><div class="line">    fail_connection=Coalesce(Sum(</div><div class="line">        Case(When(catalog=&apos;fail_connection&apos;, then=1), output_field=models.IntegerField()),</div><div class="line">    ), 0),</div><div class="line">    low_battery=Coalesce(Sum(</div><div class="line">        Case(When(catalog=&apos;low_battery&apos;, then=1), output_field=models.IntegerField()),</div><div class="line">    ), 0),</div><div class="line">    location_moved=Coalesce(Sum(</div><div class="line">        Case(When(catalog=&apos;location_moved&apos;, then=1), output_field=models.IntegerField()),</div><div class="line">    ), 0)</div><div class="line">)</div><div class="line"># 结果</div><div class="line">&#123;‘fail_connection’：12， &apos;low_battery&apos;：34, &apos;location_moved&apos;: 0&#125;</div><div class="line"></div><div class="line"># 查询每个报警类型的报警数目。</div><div class="line">latest_week_qs.values(&apos;catalog&apos;).annotate(count=Count(&apos;catalog&apos;))</div><div class="line"># 结果</div><div class="line">[&#123;&apos;catalog&apos;:&apos;low_battery&apos;, &apos;count&apos;:34&#125;,&#123;&apos;catalog&apos;:&apos;fail_connection&apos;， &apos;count&apos;: 12&#125;]</div></pre></td></tr></table></figure>
<h4 id="2-2-6-日期统计"><a href="#2-2-6-日期统计" class="headerlink" title="2.2.6 日期统计"></a>2.2.6 日期统计</h4><p>实现按年、月、日统计通常有两种方法：</p>
<ul>
<li>数据库函数 <code>django.db.connection.ops.date_trunc_sql</code></li>
<li>对第一种的封装类DateExtra，仅Django 1.10+可用</li>
</ul>
<p>以上两种结果中日期类型不一样，第一种返回时datetime对象，第二种只返回其中的分类字段，为整数类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 查询mac地址为`0FFFFFFF561C4030`的设备最近一周每天报警次数。</div><div class="line">models.Alarm.objects.filter(serial=&apos;0FFFFFFF561C4030&apos;, create_time__gt=timezone.now()-timedelta(days=7)).extra(</div><div class="line">    select=&#123;&apos;dt&apos;: connection.ops.date_trunc_sql(&apos;day&apos;, &apos;create_time&apos;)&#125;</div><div class="line">).values(&apos;dt&apos;).annotate(count=models.Count(&apos;create_time&apos;)).order_by(&apos;dt&apos;)</div><div class="line"></div><div class="line">[</div><div class="line">    &#123;&apos;count&apos;:4, &apos;dt&apos;:datetime.datetime(2016, 11, 08, 0, 0, 0,0)&#125;,</div><div class="line">    &#123;&apos;count&apos;:2, &apos;dt&apos;:datetime.datetime(2016, 11, 11, 0, 0, 0,0)&#125;,</div><div class="line">    &#123;&apos;count&apos;:1, &apos;dt&apos;:datetime.datetime(2016, 11, 12, 0, 0, 0,0)&#125;</div><div class="line">]</div><div class="line"># 在Django 1.10+ 还可以使用`DateExtra`相关类</div><div class="line">models.Alarm.objects.filter(serial=&apos;0FFFFFFF561C4030&apos;, create_time__gt=timezone.now()-timedelta(days=7))</div><div class="line">    annotate(day=ExtractDay(&apos;create_time&apos;))</div><div class="line"># 结果</div><div class="line">&#123;</div><div class="line">  &apos;count&apos;:4, &apos;day&apos;: 8,</div><div class="line">  &apos;count&apos;:2, &apos;day&apos;: 11,</div><div class="line">  &apos;count&apos;:1, &apos;day&apos;: 12</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h3><ul>
<li><code>django.db.models.Q</code>: 与、或、非条件组合查询</li>
<li><code>django.db.models.F</code>: <code>F()</code>表示数据库中相应字段的值，用于计数器更新等。</li>
<li><code>django.db.models.Functions.Coalesce</code>:接收一组参数，返回第一个不为None的数据，</li>
</ul>
<h2 id="3-管理器和查询集"><a href="#3-管理器和查询集" class="headerlink" title="3 管理器和查询集"></a>3 管理器和查询集</h2><h3 id="3-1-管理器与模型的关系"><a href="#3-1-管理器与模型的关系" class="headerlink" title="3.1 管理器与模型的关系"></a>3.1 管理器与模型的关系</h3><p>管理器是Django数据库查询的接口。查询语句<code>models.XxModels.objects.</code></p>
<ul>
<li>一个模型可以拥有一个或多个管理器。</li>
<li>默认情况下，每个模型都有名为objects的管理器，默认返回数据表中所有记录。</li>
<li>管理器来源于默认管理器、外键管理器和自定义管理器。</li>
</ul>
<h3 id="3-2-自定义管理器"><a href="#3-2-自定义管理器" class="headerlink" title="3.2 自定义管理器"></a>3.2 自定义管理器</h3><p>当一些查询逻辑复杂而且经常使用时，往往是在管理器上添加自定义函数封装相关查询逻辑，一方面减少重复代码，另一方面对view层透明，有利于MVC职责分工。</p>
<p>自定义管理器有三种方法</p>
<h4 id="3-2-1-继承-models-Manager"><a href="#3-2-1-继承-models-Manager" class="headerlink" title="3.2.1 继承 models.Manager"></a>3.2.1 继承 models.Manager</h4><p>这是默认出现的方式，以下 <code>period_date</code>函数封装了日期时间段查询函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">class AlarmManager(models.Manager):</div><div class="line">    def period_date(self, field, start_date=None, end_date=None, fmt=&apos;%Y-%m-%d&apos;):</div><div class="line">        &quot;&quot;&quot;封装日期开始结束时间段查询&quot;&quot;&quot;</div><div class="line">        def to_datetime(val):</div><div class="line">            if isinstance(val, (datetime, date)):</div><div class="line">                return val</div><div class="line">            else:</div><div class="line">                try:</div><div class="line">                    return datetime.strptime(val, fmt)</div><div class="line">                except (TypeError, ValueError):</div><div class="line">                    pass</div><div class="line"></div><div class="line">        kvs = &#123;&#125;</div><div class="line">        start_date = to_datetime(start_date)</div><div class="line">        end_date = to_datetime(end_date)</div><div class="line">        if start_date:</div><div class="line">            kvs[field + &apos;__gte&apos;] = start_date</div><div class="line">        if end_date:</div><div class="line">            kvs[field + &apos;__lte&apos;] = end_date + timedelta(days=1)  # 包含当前</div><div class="line">        return self.filter(**kvs)    </div><div class="line">    def has_location(self):</div><div class="line">        return self.filter(longitude__isnull=False, latitude__isnull=False)</div><div class="line">    def unread(self):</div><div class="line">        return self.filter(read=False)</div><div class="line"></div><div class="line"># views.py</div><div class="line"># 返回未读的报警记录</div><div class="line">alarm_list = models.Alarm.objects.unread()</div><div class="line"># 返回2016年9月12日到21日的报警记录</div><div class="line">alarm_list = models.Alarm.objects.period_date(field=&apos;create_time&apos;, start_time=&apos;2016-09-12&apos;, end_time=&apos;2016-09-21&apos;)</div><div class="line"># 返回2016年9月26日以前的报警记录</div><div class="line">alarm_list = models.Alarm.objects.period_date(field=&apos;create_time&apos;, end_time=&apos;2016-09-26&apos;)</div><div class="line">#返回2016年9月26日以前的未读报警记录</div><div class="line">alarm_list  = models.Device.objects.period_date(field=&apos;create_time&apos;, end_time=&apos;2016-09-26&apos;).unread()</div><div class="line">AttributeError: &apos;_QuerySet&apos; object has no attribute &apos;unread&apos;</div></pre></td></tr></table></figure>
<p>在最后一个查询中出现异常，因为这两个方法定义在<code>models.Manager</code>上，返回的却是<code>models.QuerySet</code>实例。这时非常希望自定义的方法能够级联调用，下面的几种方法可以解决这个问题。</p>
<h4 id="3-2-2-使用QuerySet的方法"><a href="#3-2-2-使用QuerySet的方法" class="headerlink" title="3.2.2 使用QuerySet的方法"></a>3.2.2 使用QuerySet的方法</h4><p>使用查询集上的 <code>as_manager()</code>函数创建新的管理器</p>
<p>将自定义的方法定义从<code>models.Manager</code>移到<code>models.QuerySet</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class AlarmQuerySet(models.QuerySet):</div><div class="line">    def period_date(self, field, start_date=None, end_date=None, fmt=&apos;%Y-%m-%d&apos;):</div><div class="line">        # 省略具体代码</div><div class="line">        pass</div><div class="line">    def has_location(self):</div><div class="line">        return self.filter(longitude__isnull=False, latitude__isnull=False)</div><div class="line">    def unread(self):</div><div class="line">        return self.filter(read=False)</div><div class="line"></div><div class="line">class Alarm(models.Model):</div><div class="line">    ...</div><div class="line">   objects = AlarmQuerySet.as_manager()</div></pre></td></tr></table></figure>
<p>这时代码<code>alarm_list  = models.Device.objects.period_date(field=&#39;create_time&#39;, end_time=&#39;2016-09-26&#39;).unread()</code>就能够返回正确的结果。</p>
<h4 id="3-2-3-继承Manager和QuerySet"><a href="#3-2-3-继承Manager和QuerySet" class="headerlink" title="3.2.3 继承Manager和QuerySet"></a>3.2.3 继承Manager和QuerySet</h4><p>使用管理器上的<code>from_queryset(queryset_class)</code>函数创建新的管理器<br>在使用django认证用户上一方面需要继承 <code>django.contrib.auth.models.BaseUserManager</code>，另一方面又希望能够自定义函数，这时可以使用这种方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class UserQuerySet(models.QuerySet):</div><div class="line">    def no_login_in_days(self, days):</div><div class="line">        start_time = timezone.now() - timedelta(days=days)</div><div class="line">        return self.filter(last_login_time__ge=start_time)</div><div class="line">    def no_activity_in_days(self, days):</div><div class="line">        start_time = timezone.now() - timedelta(days=days)</div><div class="line">        return self.filter(last_activity_time__ge=start_time)</div><div class="line"></div><div class="line">MyUserManager = BaseUserManager.from_queryset(UserQuerySet)</div><div class="line"></div><div class="line">class MyUser(AbstractBaseUser):</div><div class="line">    objects = MyUserManager()</div></pre></td></tr></table></figure>
<p> 当直接调用<code>django.db.models.Manager.from_queryset</code>方法，其等效于第二种方法，即以下两行等效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 使用as_manager函数</div><div class="line">objects = AlarmQuerySet.as_manager()</div><div class="line"># 使用from_queryset函数</div><div class="line">objects = models.Manager.from_queryset(AlarmQuerySet)</div></pre></td></tr></table></figure>
<h3 id="3-3-managers模块实践"><a href="#3-3-managers模块实践" class="headerlink" title="3.3 managers模块实践"></a>3.3 managers模块实践</h3><p>随着自定义管理器越来越多，代码放置在<code>models.py</code>模块显然不利于代码模块划分，需要单独创建一个模块，通常该模块名称为<code>managers</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">from django.db import models</div><div class="line">from django.contrib.auth.models import BaseUserManager</div><div class="line"></div><div class="line">class BaseQuerySet(models.QuerySet):</div><div class="line">    def common_method_for_all_models(self):</div><div class="line">        pass</div><div class="line"></div><div class="line">class AxxQuerySet(BaseQuerySet):</div><div class="line">    pass</div><div class="line"></div><div class="line">AxxManager = models.Manager().from_queryset(AxxQuerySet)</div><div class="line"></div><div class="line">class BxxQuerySet(BaseQuerySet):</div><div class="line">    pass</div><div class="line"></div><div class="line">BxxManager = models.Manager().from_queryset(BxxQuerySet)</div><div class="line"></div><div class="line">class UserQuerySet(BaseQuerySet):</div><div class="line">    pass</div><div class="line"></div><div class="line">class UserManager(BaseUserManager.from_queryset(UserQuerySet)):</div><div class="line">    def create_user(self, username, password=None, **kwargs):</div><div class="line">        pass</div></pre></td></tr></table></figure>
<p>为避免模块循环导入的问题</p>
<ul>
<li>需要使用<code>django.apps.apps.get_model</code>函数获取模型类对象，不能直接使用 <code>from models import Xxxx</code></li>
<li><code>managers</code>模块一般只能被<code>models</code>模块引用，其他模块应当不能引用</li>
</ul>
<h3 id="3-4-小提示"><a href="#3-4-小提示" class="headerlink" title="3.4 小提示"></a>3.4 小提示</h3><p><strong>覆盖get函数异常</strong></p>
<p>在获取对象函数会抛出<code>ObjectDoesNotExist</code>异常，在这种情况下我们需要使用<code>try-catch</code>捕捉异常，会出现大量重复的代码。这时我们可以用下的代码实现封装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class BaseManager(models.Manager):</div><div class="line">    def get_object(self, **kwargs):</div><div class="line">        try:</div><div class="line">            return self.get(**kwargs)</div><div class="line">        except models.ObjectDoesNotExist:</div><div class="line">            return None</div><div class="line"></div><div class="line"># 以下方式访问</div><div class="line">device = models.objects.get_object(serial=&apos;0FFFFFFF66DDF13F&apos;)</div></pre></td></tr></table></figure>
<p><strong>访问request变量</strong></p>
<p>按照MVC分离的实践，不应该直接访问request，只能通过参数传递方式。</p>
<h2 id="4-迁移"><a href="#4-迁移" class="headerlink" title="4 迁移"></a>4 迁移</h2><h3 id="4-1开发流程"><a href="#4-1开发流程" class="headerlink" title="4.1开发流程"></a>4.1开发流程</h3><p>迁移是将模型代码的变化应用到数据库。这个是在1.7新引入的特性，在此之前的版本可以使用第三方库<a href="http://south.aeracode.org/" target="_blank" rel="external">South</a>实现类似的功能。</p>
<p>迁移通常可以按照下列步骤循环进行。</p>
<ul>
<li>1 编写<code>models</code>模块代码</li>
<li>2 模型迁移：执行 <code>python manage.py makemigrations</code>，在<code>APP.migrations</code>包生成迁移文件（模块）。</li>
<li>3 数据迁移：如果需要数据迁移，按照一定的格式编写迁移文件。</li>
<li>3 应用迁移文件：执行 <code>python manage.py migrate</code>，将2、3步迁移文件所实现的数据库变化应用到数据库。</li>
</ul>
<p>Django Migration分为模式迁移（Schema migration）和数据迁移（Data Migration）。</p>
<ul>
<li>模式迁移：包括表结构修改，对应于 SQL的 <code>CREATE TABLE</code> <code>ALTER TABLE</code>和 <code>DROP TABLE</code>，可以由Django自动生成。</li>
<li>数据迁移：包括数据记录修改，对应于SQL的 <code>INSERT TO</code> <code>DELETE</code>和 <code>UPDATE</code>等语句,需要开发者自己编写。</li>
</ul>
<p>无论是模式迁移还是数据迁移，迁移文件都具有几个特点：</p>
<ul>
<li>每个迁移文件是一个Python模块，位于应用目录migrations包下，</li>
<li>迁移类名称固定为Migration，继承自<code>django.db.models.migrations.Migration</code></li>
<li><code>dependencies</code>表示需要依赖的迁移文件列表</li>
<li><code>operations</code>表示一系列依次进行的迁移操作</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from django.db import migrations</div><div class="line"></div><div class="line">class Migration(migrations.Migration):</div><div class="line">    dependencies = []</div><div class="line">   operations = []</div></pre></td></tr></table></figure>
<h3 id="4-2-编写数据迁移文件"><a href="#4-2-编写数据迁移文件" class="headerlink" title="4.2 编写数据迁移文件"></a>4.2 编写数据迁移文件</h3><p>一个典型应用场景是冗余字段的添加。以上述设备管理系统为例子，在前期数据库设计中Alarm表没有<code>longitude</code> <code>latitude</code>和<code>address</code>三个字段，可以通过外键查询得到。<br>查询操作远远多于插入操作。可以通过冗余字段以解决查询慢的问题。</p>
<p>所有的操作被操作<code>migrations.RunPython</code>类中，要注意的是无法直接引用模型类，需要<code>django.apps.get_model</code>函数查找。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">from __future__ import unicode_literals</div><div class="line"></div><div class="line">from django.db import migrations, models</div><div class="line"></div><div class="line">def create_address_for_alarm(apps, scheme_editor):</div><div class="line">    AlarmClass = apps.get_model(&apos;hdc&apos;, &apos;Alarm&apos;)</div><div class="line">    for alarm in AlarmClass.objects.all():</div><div class="line">        alarm.longitude = alarm.device.longitude</div><div class="line">        alarm.latitude = alarm.device.latitude</div><div class="line">        alarm.address = alarm.device.address</div><div class="line">        alarm.save()</div><div class="line"></div><div class="line">class Migration(migrations.Migration):</div><div class="line">    dependencies = [</div><div class="line">        (&apos;hdc&apos;, &apos;0002_alarm_address&apos;),</div><div class="line">    ]</div><div class="line"></div><div class="line">    operations = [</div><div class="line">         migrations.RunPython(create_address_for_alarm),</div><div class="line">    ]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结了一些Django数据库查询的实践经验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本的增删改查&lt;/li&gt;
&lt;li&gt;分类统计：&lt;code&gt;aggregate&lt;/code&gt;和&lt;code&gt;annotate&lt;/code&gt;的使用&lt;/li&gt;
&lt;li&gt;实现按年/月/日统计&lt;/li&gt;
&lt;li&gt;Manager和QuerySet的混合使用&lt;/li&gt;
&lt;li&gt;编写迁移文件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Django" scheme="http://kinegratii.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>使用Python元类简化Django中的Field.choices</title>
    <link href="http://kinegratii.github.io/2016/11/02/python-metaclass/"/>
    <id>http://kinegratii.github.io/2016/11/02/python-metaclass/</id>
    <published>2016-11-02T08:05:57.000Z</published>
    <updated>2016-11-17T23:30:31.731Z</updated>
    
    <content type="html"><![CDATA[<p>  使用Python元类改写Django模型字段的choices，使其更加简单可读。</p>
<a id="more"></a>
<h2 id="Django-Field-choices"><a href="#Django-Field-choices" class="headerlink" title="Django Field.choices"></a>Django Field.choices</h2><p>choices是Django定义模型字段的可选参数，适用于所有的字段类型。</p>
<p>choices是一个可迭代的对象，其中每个元素包含两个值。每个元素的第一个元素是写入数据库的真实值，第二个值是可读的名称。类似 n x 2 的二维数组。比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">YEAR_IN_SCHOOL_CHOICES = (</div><div class="line">    (&apos;FR&apos;, &apos;Freshman&apos;),</div><div class="line">    (&apos;SO&apos;, &apos;Sophomore&apos;),</div><div class="line">    (&apos;JR&apos;, &apos;Junior&apos;),</div><div class="line">    (&apos;SR&apos;, &apos;Senior&apos;),</div><div class="line">)</div></pre></td></tr></table></figure>
<p>当某个字段设置了这个参数，默认的表单组件将变成一个携带这些选项的选择框，而不是标准的文本输入框。</p>
<p>一般来说，choices变量应该在model内部定义，而且每个值都用一个常量赋值定义。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">from django.db import models</div><div class="line"></div><div class="line">class Student(models.Model):</div><div class="line">    FRESHMAN = &apos;FR&apos;</div><div class="line">    SOPHOMORE = &apos;SO&apos;</div><div class="line">    JUNIOR = &apos;JR&apos;</div><div class="line">    SENIOR = &apos;SR&apos;</div><div class="line">    YEAR_IN_SCHOOL_CHOICES = (</div><div class="line">        (FRESHMAN, &apos;Freshman&apos;),</div><div class="line">        (SOPHOMORE, &apos;Sophomore&apos;),</div><div class="line">        (JUNIOR, &apos;Junior&apos;),</div><div class="line">        (SENIOR, &apos;Senior&apos;),</div><div class="line">    )</div><div class="line">    year_in_school = models.CharField(</div><div class="line">        max_length=2,</div><div class="line">        choices=YEAR_IN_SCHOOL_CHOICES,</div><div class="line">        default=FRESHMAN,</div><div class="line">    )</div><div class="line"></div><div class="line">    def is_upperclass(self):</div><div class="line">        return self.year_in_school in (self.JUNIOR, self.SENIOR)</div></pre></td></tr></table></figure>
<p>使用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = Student(year_in_school=Student.JUNIOR)</div><div class="line">&gt;&gt;&gt; s.year_in_school</div><div class="line">&apos;JR&apos;</div><div class="line">&gt;&gt;&gt; s.get_year_in_school_display()</div><div class="line">&apos;Junior&apos;</div><div class="line">&gt;&gt;&gt; y = &apos;Et&apos;</div><div class="line">y in [c[0] for c in Student.YEAR_IN_SCHOOL_CHOICES]</div><div class="line">True</div></pre></td></tr></table></figure>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><ul>
<li>在不考虑多变量同时赋值，每增加一个取值时，需要添加两行代码</li>
<li>由于常量变量（如<code>JUNIOR</code>和<code>SENIOR</code>）直接定义在Model中，当Model有两个字段同时定义了choices，很难区分哪些常量值是属于同一字段的不同取值。</li>
<li>判断取值是否有效时，每次都要构造值的列表 、 集合。</li>
</ul>
<h2 id="改进后的Field-choices"><a href="#改进后的Field-choices" class="headerlink" title="改进后的Field.choices"></a>改进后的Field.choices</h2><p>代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class ChoicesMetaclass(type):</div><div class="line">    def __new__(cls, name, bases, attrs):</div><div class="line">        choices = []</div><div class="line">        values = &#123;&#125;</div><div class="line">        ks = []</div><div class="line">        for k, v in six.iteritems(attrs):</div><div class="line">            if k.isupper() and not k.startswith(&apos;_&apos;):</div><div class="line">                if isinstance(v, tuple) and len(v) == 2:</div><div class="line">                    pass</div><div class="line">                else:</div><div class="line">                    v = v, v</div><div class="line">                ks.append(k)</div><div class="line">                choices.append(v)</div><div class="line">                values[v[0]] = v[1]</div><div class="line">                attrs[k] = v[0]</div><div class="line">        attrs[&apos;choices&apos;] = choices</div><div class="line">        attrs[&apos;values&apos;] = values</div><div class="line">        return type.__new__(cls, name, bases, attrs)</div><div class="line"></div><div class="line"></div><div class="line">class ConstChoices(six.with_metaclass(ChoicesMetaclass)):</div><div class="line">    @classmethod</div><div class="line">    def is_valid(cls, value):</div><div class="line">        return value in cls.values</div><div class="line"></div><div class="line">    @classmethod</div><div class="line">    def get_value_display(cls, value):</div><div class="line">        return cls.values.get(value)</div></pre></td></tr></table></figure>
<p>要点</p>
<ul>
<li>将同一个choices单独封装在一个类当中。</li>
<li>在定义常量过程中，自动计算choices和values。</li>
<li>每一个项取值都放在一行，如<code>FRESHMAN = &#39;FR&#39;, &#39;Freshman&#39;</code></li>
</ul>
<p>使用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Student(models.Model):</div><div class="line">    class YearInShoolChoices(ConstChoices):</div><div class="line">        FRESHMAN = &apos;FR&apos;, &apos;Freshman&apos;</div><div class="line">        SOPHOMORE = &apos;SO&apos;, &apos;Sophomore&apos;</div><div class="line">        JUNIOR = &apos;JR&apos;, &apos;Junior&apos;</div><div class="line">        SENIOR = &apos;SR&apos;, &apos;Senior&apos;</div><div class="line"></div><div class="line">    year_in_school = models.CharField(</div><div class="line">        max_length=2,</div><div class="line">        choices=YearInShoolChoices.choices,</div><div class="line">        default=YearInShoolChoices.FRESHMAN,</div><div class="line">    )</div><div class="line"></div><div class="line">    def is_upperclass(self):</div><div class="line">        return self.year_in_school in (YearInShoolChoices.JUNIOR, YearInShoolChoices.SENIOR)</div></pre></td></tr></table></figure>
<p>使用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = Student(year_in_school=Student.JUNIOR)</div><div class="line">&gt;&gt;&gt; s.year_in_school</div><div class="line">&apos;JR&apos;</div><div class="line">&gt;&gt;&gt; s.get_year_in_school_display()</div><div class="line">&apos;Junior&apos;</div><div class="line">&gt;&gt;&gt; y = &apos;Et&apos;</div><div class="line">YearInShoolChoices.is_valid(y)</div><div class="line">True</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  使用Python元类改写Django模型字段的choices，使其更加简单可读。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://kinegratii.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ionic安卓构建</title>
    <link href="http://kinegratii.github.io/2016/10/29/ionic-build-android/"/>
    <id>http://kinegratii.github.io/2016/10/29/ionic-build-android/</id>
    <published>2016-10-29T12:48:00.000Z</published>
    <updated>2016-10-31T10:37:35.011Z</updated>
    
    <content type="html"><![CDATA[<p>本文描述了ionic项目构建Android安装包的主要步骤。</p>
<a id="more"></a>
<h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1 环境配置"></a>1 环境配置</h2><h3 id="1-1-添加Android平台"><a href="#1-1-添加Android平台" class="headerlink" title="1.1 添加Android平台"></a>1.1 添加Android平台</h3><p>执行  <code>ionic platform add android</code> 即可</p>
<h3 id="1-2-Java路径配置"><a href="#1-2-Java路径配置" class="headerlink" title="1.2 Java路径配置"></a>1.2 Java路径配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PATH=path\to\bin\</div></pre></td></tr></table></figure>
<h3 id="1-3-Android环境配置"><a href="#1-3-Android环境配置" class="headerlink" title="1.3 Android环境配置"></a>1.3 Android环境配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ANDROID_HOME=你的SDK目录</div></pre></td></tr></table></figure>
<p>将 <code>%ANDROID_HOME%\tools\;%ANDROID_HOME%\platform_tools\</code> 加到PATH变量后面。</p>
<h2 id="2-Android自动签名"><a href="#2-Android自动签名" class="headerlink" title="2 Android自动签名"></a>2 Android自动签名</h2><h2 id="2-1-配置release-signing-properties文件"><a href="#2-1-配置release-signing-properties文件" class="headerlink" title="2.1 配置release-signing.properties文件"></a>2.1 配置release-signing.properties文件</h2><ol>
<li>在platforms\android目录新建名为release-signing.properties的文件，文件内容如下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">storeFile=path/to/keystore</div><div class="line">keyAlias=your key alias</div><div class="line">storePassword=your store password</div><div class="line">keyPassword=your key password</div></pre></td></tr></table></figure>
<p>备注：在windows下storeFile文件路径应使用Unix下的目录分隔符 <code>/</code>。</p>
<h2 id="3-编译"><a href="#3-编译" class="headerlink" title="3 编译"></a>3 编译</h2><p>使用 <code>ionic build --release android</code> 编译即可，在\platforms\android\build\outputs\apk出现android-release.apk文件即是已签名的安装包。</p>
<h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4 注意事项"></a>4 注意事项</h2><p>在升级到ionic2时，使用 <code>ionic build --release android</code> 可能会出现 <code>✗ You cannot run iOS unless you are on Mac OSX.</code>的错误，可改为 <code>ionic build android --release</code> 即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文描述了ionic项目构建Android安装包的主要步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="ionic" scheme="http://kinegratii.github.io/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>新的起点</title>
    <link href="http://kinegratii.github.io/2016/10/28/first-post/"/>
    <id>http://kinegratii.github.io/2016/10/28/first-post/</id>
    <published>2016-10-28T05:48:54.000Z</published>
    <updated>2016-12-01T13:29:50.517Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>你说有一日总会名扬天下实现你抱负</p>
</blockquote>
<p>2016年10月28日，KgBlog重新启用，由之前的 <a href="http://www.getpelican.com" target="_blank" rel="external">Pelican</a> 改用 <a href="https://hexo.io/" target="_blank" rel="external">hexo</a>  构建，按照官方文档和相关资料将博客基本搭建完成。</p>
<p>当然还有许多事情还没有完成。</p>
<ul>
<li>继续迁移之前的文章</li>
<li>添加多说评论</li>
<li>添加文章分享</li>
<li>使用自定义域名</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;你说有一日总会名扬天下实现你抱负&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2016年10月28日，KgBlog重新启用，由之前的 &lt;a href=&quot;http://www.getpelican.com&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
      <category term="生活" scheme="http://kinegratii.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>使用DaoCloud部署Django项目</title>
    <link href="http://kinegratii.github.io/2016/07/23/daocloud-django-deploy/"/>
    <id>http://kinegratii.github.io/2016/07/23/daocloud-django-deploy/</id>
    <published>2016-07-23T06:56:00.000Z</published>
    <updated>2016-11-01T12:43:20.336Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了在DaoCloud平台部署Django项目的方法。</p>
<a id="more"></a>
<h2 id="1-DaoCloud云平台"><a href="#1-DaoCloud云平台" class="headerlink" title="1 DaoCloud云平台"></a>1 DaoCloud云平台</h2><p>关于DaoCloud云平台。<a href="https://www.daocloud.io/" target="_blank" rel="external">https://www.daocloud.io/</a></p>
<blockquote>
<p>DaoCloud 为用户提供了 Docker 镜像的自动构建和自动发布功能，当用户完成了 Dockerfile 和 daocloud.yml 文件的编写后，将应用代码推送到第三方代码托管平台上，将其与 DaoCloud 绑定后，在每次修改（commit）后，并将其推送到代码托管平台上，DaoCloud 会检测到代码的变动，并根据 Dockerfile 和 daocloud.yml 进行相应的构建和测试；当触发规定的构建事件（如 tag）时，DaoCloud 会将其进行镜像构建，并推送到相对应的所有生产环节中。</p>
</blockquote>
<h2 id="2-Django项目配置"><a href="#2-Django项目配置" class="headerlink" title="2 Django项目配置"></a>2 Django项目配置</h2><p>项目总布局如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- wcp_platform/</div><div class="line">  - admin.py</div><div class="line">  - forms.py</div><div class="line">  - models.py</div><div class="line">  - views.py</div><div class="line">- wcp/</div><div class="line">  - daocloud_settings.py</div><div class="line">  - daocloud_wsgi.py</div><div class="line">  - settings.py</div><div class="line">  - test_settings.py</div><div class="line">  - urls.py</div><div class="line">  - wsgi.py</div><div class="line">- fixtures/</div><div class="line">  - user.json</div><div class="line">- static/</div><div class="line">- template/</div><div class="line">- Dockerfile</div><div class="line">- daocloud.yml</div><div class="line">- docker-entrypoint.sh</div><div class="line">- manage.py</div><div class="line">- requirements.txt</div></pre></td></tr></table></figure>
<h2 id="3-基于daocloud的配置"><a href="#3-基于daocloud的配置" class="headerlink" title="3 基于daocloud的配置"></a>3 基于daocloud的配置</h2><h3 id="3-1-daocloud-settings模块"><a href="#3-1-daocloud-settings模块" class="headerlink" title="3.1 daocloud_settings模块"></a>3.1 daocloud_settings模块</h3><p>daocloud_settings模块重写了数据库配置（这里使用了mysql服务）和wsgi配置模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from __future__ import unicode_literals</div><div class="line">from .settings import *</div><div class="line">DATABASES = &#123;</div><div class="line">    &apos;default&apos;: &#123;</div><div class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class="line">        &apos;NAME&apos;: os.environ[&apos;MYSQL_INSTANCE_NAME&apos;],</div><div class="line">        &apos;USER&apos;: os.environ[&apos;MYSQL_USERNAME&apos;],</div><div class="line">        &apos;PASSWORD&apos;: os.environ[&apos;MYSQL_PASSWORD&apos;],</div><div class="line">        &apos;HOST&apos;: os.environ[&apos;MYSQL_PORT_3306_TCP_ADDR&apos;],</div><div class="line">        &apos;PORT&apos;: os.environ[&apos;MYSQL_PORT_3306_TCP_PORT&apos;],</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">WSGI_APPLICATION = wcp.daocloud_wsgi.application&apos;</div></pre></td></tr></table></figure>
<h3 id="3-2-daocloud-wsgi模块"><a href="#3-2-daocloud-wsgi模块" class="headerlink" title="3.2 daocloud_wsgi模块"></a>3.2 daocloud_wsgi模块</h3><p>daocloud_wsgi.py模块设置了环境变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from __future__ import unicode_literals</div><div class="line">import os</div><div class="line">from django.core.wsgi import get_wsgi_application</div><div class="line">os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;wcp.daocloud_settings&quot;)</div><div class="line">application = get_wsgi_application()</div></pre></td></tr></table></figure>
<h3 id="3-3-Dockerfile"><a href="#3-3-Dockerfile" class="headerlink" title="3.3 Dockerfile"></a>3.3 Dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">FROM daocloud.io/python:2.7</div><div class="line">ADD requirements.txt /tmp/requirements.txt</div><div class="line">RUN pip install -r /tmp/requirements.txt</div><div class="line">RUN mkdir /code</div><div class="line">WORKDIR /code</div><div class="line">COPY . /code</div><div class="line">COPY docker-entrypoint.sh docker-entrypoint.sh</div><div class="line">RUN chmod +x docker-entrypoint.sh</div><div class="line">EXPOSE 8080</div><div class="line">CMD /code/docker-entrypoint.sh</div></pre></td></tr></table></figure>
<p>具体流程</p>
<ul>
<li>安装依赖库</li>
<li>拷贝项目代码</li>
<li>修改<code>docker-entrypoint.sh</code>权限为可执行</li>
<li>开放端口</li>
<li>执行<code>docker-entrypoint.sh</code></li>
</ul>
<h3 id="3-4-启动脚本"><a href="#3-4-启动脚本" class="headerlink" title="3.4 启动脚本"></a>3.4 启动脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ython /code/manage.py migrate --settings=wcp.daocloud_settings --noinput</div><div class="line">python /code/manage.py collectstatic -- settings=wcp.daocloud_settings --noinput</div><div class="line">/usr/local/bin/gunicorn wcp.daocloud_wsgi:application -w 2 -b :8080 --env DJANGO_SETTINGS_MODULE=&apos;wcp.daocloud_settings&apos;</div></pre></td></tr></table></figure>
<p>启动流程</p>
<ul>
<li>创建数据表</li>
<li>收集静态文件</li>
<li>使用gunicorn启动Django项目</li>
</ul>
<h3 id="3-5-持续集成：daocloud-yml"><a href="#3-5-持续集成：daocloud-yml" class="headerlink" title="3.5 持续集成：daocloud.yml"></a>3.5 持续集成：daocloud.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">image: daocloud/ci-python:2.7</div><div class="line">script:</div><div class="line">  - pip install -r requirements.txt</div><div class="line">  - python manage.py test --settings=wcp.test_settings</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了在DaoCloud平台部署Django项目的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Django" scheme="http://kinegratii.github.io/tags/Django/"/>
    
      <category term="DaoCloud" scheme="http://kinegratii.github.io/tags/DaoCloud/"/>
    
      <category term="部署" scheme="http://kinegratii.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>自动发送动弹到开源中国</title>
    <link href="http://kinegratii.github.io/2016/05/17/osc-tweet-publish/"/>
    <id>http://kinegratii.github.io/2016/05/17/osc-tweet-publish/</id>
    <published>2016-05-17T12:53:09.000Z</published>
    <updated>2016-11-18T12:54:55.863Z</updated>
    
    <content type="html"><![CDATA[<p>自动发送动弹到开源中国。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"># coding=utf8</div><div class="line">from __future__ import unicode_literals</div><div class="line">import requests</div><div class="line">import hashlib</div><div class="line">import re</div><div class="line">from datetime import datetime</div><div class="line">class User(object):</div><div class="line">    def __init__(self, username, password, user_code=None, user_id=None):</div><div class="line">        self.username = username</div><div class="line">        self.password = password</div><div class="line">        self.user_code = user_code</div><div class="line">        self.user_id = user_id</div><div class="line">    @property</div><div class="line">    def password_hash(self):</div><div class="line">        return hashlib.sha1(self.password).hexdigest()</div><div class="line">class OSCTweetRobot(object):</div><div class="line">    LOGIN_URL = &apos;https://www.oschina.net/action/user/hash_login&apos;</div><div class="line">    HOME_URL = &apos;https://www.oschina.net/&apos;</div><div class="line">    PUBLISH_URL = &apos;https://www.oschina.net/action/tweet/pub&apos;</div><div class="line">    HEADERS = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36&apos;&#125;</div><div class="line">    def __init__(self, user):</div><div class="line">        self.user = user</div><div class="line">        self.client = requests.session()</div><div class="line">        self.client.headers = self.HEADERS</div><div class="line">    def login(self, **kwargs):</div><div class="line">        data = &#123;</div><div class="line">            &apos;email&apos;:self.user.username,</div><div class="line">            &apos;pwd&apos;:self.user.password_hash</div><div class="line">        &#125;</div><div class="line">        has_login = False</div><div class="line">        login_rsp = self.client.post(self.LOGIN_URL, data)</div><div class="line">        if login_rsp.status_code == 200:</div><div class="line">            home_rsp = self.client.get(self.HOME_URL)</div><div class="line">            if home_rsp.status_code == 200:</div><div class="line">                content = home_rsp.content</div><div class="line">                m_regx = re.search(r&quot;name=&apos;user_code&apos; value=&apos;(?P&lt;user_code&gt;.*?)&apos;/&gt;&quot;, content)</div><div class="line">                if m_regx:</div><div class="line">                    self.user.user_code = m_regx.group(&apos;user_code&apos;)</div><div class="line">                    m_regx = re.search(r&quot;name=&apos;user&apos; value=&apos;(?P&lt;user_id&gt;.*?)&apos;/&gt;&quot;, content)</div><div class="line">                    if m_regx:</div><div class="line">                        self.user.user_id =  m_regx.group(&apos;user_id&apos;)</div><div class="line">                        has_login = True</div><div class="line">        if has_login:</div><div class="line">            print(&apos;[Success] Login success! User info&apos;)</div><div class="line">            print(self.user.__dict__)</div><div class="line">        else:</div><div class="line">            print(&apos;[Fail] fail to login!&apos;)</div><div class="line">        return has_login</div><div class="line">    def publish_tweet(self, msg, **kwargs):</div><div class="line">        post_data = &#123;</div><div class="line">            &apos;user_code&apos;:self.user.user_code,</div><div class="line">            &apos;user&apos;:self.user.user_id,</div><div class="line">            &apos;msg&apos;:msg</div><div class="line">        &#125;</div><div class="line">        rsp = self.client.post(self.PUBLISH_URL,post_data)</div><div class="line">        if 200 &lt;= rsp.status_code &lt; 300:</div><div class="line">            print(&apos;[Success] Push tweet success!&apos;)</div><div class="line">        else:</div><div class="line">            print(&apos;[Fail] Fail to push tweet!&apos;)</div><div class="line">def main():</div><div class="line">    u = User(&apos;YOUR USERNAME&apos;, &apos;YOUR PASSWORD&apos;)</div><div class="line">    robot = OSCTweetRobot(u)</div><div class="line">    robot.login()</div><div class="line">    s = datetime.now().strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)</div><div class="line">    # robot.publish_tweet(msg=s)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动发送动弹到开源中国。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://kinegratii.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python打包工具</title>
    <link href="http://kinegratii.github.io/2016/04/23/python-package/"/>
    <id>http://kinegratii.github.io/2016/04/23/python-package/</id>
    <published>2016-04-23T00:34:21.000Z</published>
    <updated>2016-11-01T12:45:51.772Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了py2exe、cx_freeze和PyInstaller这三种Python打包工具的使用方法。</p>
<a id="more"></a>
<h2 id="1-Python打包工具"><a href="#1-Python打包工具" class="headerlink" title="1 Python打包工具"></a>1 Python打包工具</h2><p>目前在windows平台上将Python程序打包成exe文件主要有三个工具。</p>
<ul>
<li>py2exe <a href="http://www.py2exe.org/" target="_blank" rel="external">http://www.py2exe.org/</a></li>
<li>cx_freeze <a href="http://cx-freeze.sourceforge.net/" target="_blank" rel="external">http://cx-freeze.sourceforge.net/</a></li>
<li>PyInstaller <a href="http://pythonhosted.org/PyInstaller/" target="_blank" rel="external">http://pythonhosted.org/PyInstaller/</a></li>
</ul>
<p>今天将一个Tkinter写的界面程序打包成exe文件，三个工具都试了一遍，感觉PyInstaller会比较好用一些。</p>
<h2 id="2-py2exe"><a href="#2-py2exe" class="headerlink" title="2 py2exe"></a>2 py2exe</h2><h3 id="2-1-下载安装"><a href="#2-1-下载安装" class="headerlink" title="2.1 下载安装"></a>2.1 下载安装</h3><p>从这里<a href="https://sourceforge.net/projects/py2exe/files/py2exe/0.6.9/" target="_blank" rel="external">https://sourceforge.net/projects/py2exe/files/py2exe/0.6.9/</a> 选择python版本和计算机位数对应的exe文件，双击即可安装。</p>
<h3 id="2-2-启动脚本"><a href="#2-2-启动脚本" class="headerlink" title="2.2 启动脚本"></a>2.2 启动脚本</h3><p>写一个setup_py2exe.py文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">from distutils.core import setup</div><div class="line">import py2exe</div><div class="line">options = &#123;&apos;py2exe&apos;: &#123;&apos;compressed&apos;: 1,</div><div class="line">                      &apos;optimize&apos;: 2,</div><div class="line">                      &apos;bundle_files&apos;: 1, &#125;&#125;</div><div class="line">setup(name=&apos;App&apos;,</div><div class="line">      author=&apos;kinegratii&apos;,</div><div class="line">      version=&apos;1.0.0&apos;,</div><div class="line">      options=options,</div><div class="line">      windows=[&#123;&quot;script&quot;: &quot;app.py&quot;&#125;],</div><div class="line">      zipfile=None</div><div class="line">      )</div></pre></td></tr></table></figure>
<h3 id="2-3-命令"><a href="#2-3-命令" class="headerlink" title="2.3 命令"></a>2.3 命令</h3><p>执行python setup_py2exe.py py2exe即可，dist目录就是最后生成的结果。</p>
<h3 id="2-4-Q-amp-A"><a href="#2-4-Q-amp-A" class="headerlink" title="2.4 Q&amp;A"></a>2.4 Q&amp;A</h3><p><strong>import py2exe</strong></p>
<p><code>import py2exe</code>这个语句要保留，因为用PyCharm自动格式化的时候总会把这个语句优化掉。</p>
<p><strong>UnicodeDecodeError异常</strong></p>
<p>之前加了<code>from __future__ import unicode_literals</code>这个语句，会报<code>UnicodeDecodeError: &#39;utf8&#39; codec can&#39;t decode byte 0xd1 in position 3: invalid continuation byte</code></p>
<p><strong>lxml库</strong></p>
<p>程序报的异常是<code>ImportError: No module named lxml._elementpath</code>，但按照网上的说法加了includes参数可以解决。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">options=&#123;</div><div class="line">    &apos;py2exe&apos;: &#123;</div><div class="line">        &apos;includes&apos;: [&apos;lxml.etree&apos;, &apos;lxml._elementpath&apos;, &apos;gzip&apos;],</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>TypeError: expected string or buffer</strong></p>
<p>这个异常是docx这个库出现的。找了很久还没有什么头绪。</p>
<h2 id="3-cx-freeze"><a href="#3-cx-freeze" class="headerlink" title="3 cx_freeze"></a>3 cx_freeze</h2><h3 id="3-1-pip安装"><a href="#3-1-pip安装" class="headerlink" title="3.1 pip安装"></a>3.1 pip安装</h3><p>执行pip命令即可安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install cx_Freeze</div></pre></td></tr></table></figure>
<h3 id="3-2-启动脚本"><a href="#3-2-启动脚本" class="headerlink" title="3.2 启动脚本"></a>3.2 启动脚本</h3><p>setup_cx.py文件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">from __future__ import unicode_literals</div><div class="line">import sys</div><div class="line">from cx_Freeze import setup, Executable</div><div class="line">base = None</div><div class="line">if sys.platform == &quot;win32&quot;:</div><div class="line">    base = &quot;Win32GUI&quot;</div><div class="line">includeFiles = [</div><div class="line">    (r&quot;D:\py\tcl\tcl8.5&quot;, &quot;tcl&quot;),</div><div class="line">    (r&quot;D:\py\tcl\tk8.5&quot;, &quot;tk&quot;)</div><div class="line">]</div><div class="line">setup(</div><div class="line">    name=&quot;App&quot;,</div><div class="line">    version=&quot;1.0&quot;,</div><div class="line">    description=&quot;A demo app&quot;,</div><div class="line">    options=&#123;&quot;build_exe&quot;: &#123;&quot;include_files&quot;: includeFiles, &#125;&#125;,</div><div class="line">    executables=[Executable(&quot;app.py&quot;, base=base, includes=[&apos;lxml&apos;, &apos;lxml.tree&apos;, &apos;lxml._namepath&apos;])]</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="3-3-命令"><a href="#3-3-命令" class="headerlink" title="3.3 命令"></a>3.3 命令</h3><p>执行命令python setup_cx.py build，dist下的exe.开头的文件夹（名字跟具体环境有关，比如我的是exe.win32-2.7）就是最后的生成的文件夹。</p>
<h3 id="3-4-Q-amp-A"><a href="#3-4-Q-amp-A" class="headerlink" title="3.4 Q&amp;A"></a>3.4 Q&amp;A</h3><p><strong>lxml</strong></p>
<p>也需要明确包含<code>lxml._elementpath</code></p>
<p><strong>docx</strong></p>
<p>也出现了和py2exe一样的异常。</p>
<h2 id="4-PyInstaller"><a href="#4-PyInstaller" class="headerlink" title="4 PyInstaller"></a>4 PyInstaller</h2><h3 id="4-1-pip安装"><a href="#4-1-pip安装" class="headerlink" title="4.1  pip安装"></a>4.1  pip安装</h3><p>执行pip安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyinstaller</div></pre></td></tr></table></figure>
<p>安装成功后在python的目录下\Scripts文件夹多出pyinstaller.exe、pyinstaller.exe.manifest、pyinstaller-script.py等几个文件。</p>
<h3 id="4-2-命令方式构建"><a href="#4-2-命令方式构建" class="headerlink" title="4.2 命令方式构建"></a>4.2 命令方式构建</h3><p>把Scripts目录加到系统的环境变量中，cd到脚本所在的目录，然后执行下面的命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyinstaller app.py -F -w --clean</div></pre></td></tr></table></figure>
<p>app.py 脚本文件</p>
<p>几个选项含义</p>
<ul>
<li>-F 打包为单一文件，和打包为一个文件夹相对，默认为后者</li>
<li>-w 窗口程序，与控制台相对</li>
<li>–clean 每次清理中间产生的构建文件</li>
</ul>
<p>生成的相关文件包括</p>
<ul>
<li>app.spec 配置文件</li>
<li>build文件夹 构建中产生的中间文件</li>
<li>dist/app文件夹 这里的文件都是运行所需要的</li>
</ul>
<h3 id="4-3-启动脚本方式"><a href="#4-3-启动脚本方式" class="headerlink" title="4.3 启动脚本方式"></a>4.3 启动脚本方式</h3><p>命令行带太多参数的话，每次都要输入，比较麻烦，可以统统写在一个py脚本中。</p>
<p>PyInstaller也是一个标准的Python包，提供了<code>PyInstaller.main.run</code>这个方法。</p>
<p>4.2节中等效的python脚本如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    from PyInstaller.main import run</div><div class="line">    params=[app.py&apos;, &apos;-F&apos;, &apos;-w&apos;, &apos;--clean&apos;]</div><div class="line">    run(params)</div></pre></td></tr></table></figure>
<p>用Python解释器执行这个脚本就可以了。</p>
<h3 id="4-4-Q-amp-A"><a href="#4-4-Q-amp-A" class="headerlink" title="4.4 Q&amp;A"></a>4.4 Q&amp;A</h3><p><strong>lxml</strong></p>
<p>可以解决lxml包含的问题，无需明确指定</p>
<p><strong>调试</strong></p>
<p>由于用了没有控制台的-w方式，如果程序启动有错的话，只会弹出app return -1的对话框，没有具体异常信息。可以先去掉-w，用控制台进行调试，所有的异常和程序中的print函数就显示在控制台上，方便调试。</p>
<p><strong>单exe资源文件路径问题</strong></p>
<p>这个问题应该只要是最后打包成单个exe都会出现的问题。描述如下</p>
<p>最后打包的文件结构如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- XxxApp</div><div class="line">    - app.exe</div><div class="line">    - data</div><div class="line">        - wpa.db</div></pre></td></tr></table></figure>
<p>程序中用下面语句引用wpa.db文件，会出现文件打不开的情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BASE_DIR = os.path.abspath(os.path.dirname(__file__))</div><div class="line">DB_FILE = os.path.join(BASE_DIR,&apos;data&apos;, &apos;wpa.db&apos;)</div></pre></td></tr></table></figure>
<p>调试打印出<code>BASE_DIR</code>，发现路径不是XxxApp，而是在用户目录下的某一个位置，类似如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c:\Users\kinegratii\AppData&apos;Local\Temp\_MEI11~1\dadta\wpa.db</div></pre></td></tr></table></figure>
<p>这是因为<strong>在单文件模式中运行程序的时候先将文件解压到sys._MEIPASS指向的目录下，所以引用资源文件就需要添加os.path.join(sys._MEIPASS,filename)</strong>，</p>
<p>第一种方法，具体判断程序当前模式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if getattr(sys, &apos;frozen&apos;, False):</div><div class="line">      BASE_DIR = sys._MEIPASS</div><div class="line">  else:</div><div class="line">      BASE_DIR = os.path.dirname(__file__)</div></pre></td></tr></table></figure>
<p>第二种，就是将<code>__file__</code>改为sys.args[0]，即</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BASE_DIR = os.path.abspath(os.path.dirname(sys.argv[0]))</div></pre></td></tr></table></figure>
<p>这样打印的路径就是正确的了，原因在于<code>__file__</code>和<code>sys.args[0]</code>有点区别。</p>
<blockquote>
<p><code>__file__</code> is the name of the current file, which may be different from the main script if you are inside a module or if you start a script using execfile() rather than by invoking python scriptname.py.  <code>__file__</code> is generally your safer bet.</p>
</blockquote>
<p>来自 <a href="http://stackoverflow.com/a/5851608" target="_blank" rel="external">http://stackoverflow.com/a/5851608</a></p>
<p><strong>icon图标无法显示问题</strong></p>
<p>使用icon选项即可添加图标，但有时候发现资源管理器的图标可以显示，但运行程序后任务栏上的图标却无法显示。关于这个问题 。</p>
<blockquote>
<p>在不同情况下（比如资源管理器文件列表前面的图标、桌面、开始菜单等）需要不一样尺寸的图标。如果尺寸不合适的话，可能出现有的地方显示正确有的显示不正确的情况。最后几个地方都要检查一遍。</p>
</blockquote>
<p>解决方案</p>
<blockquote>
<p>应该准备四张不同尺寸（具体尺寸参见 <a href="http://stackoverflow.com/questions/3236115/which-icon-sizes-should-my-windows-applications-icon-include" target="_blank" rel="external">http://stackoverflow.com/questions/3236115/which-icon-sizes-should-my-windows-applications-icon-include</a> ）的png文件<br>用png2icon脚本把它们合成一张icon图标文件即可</p>
</blockquote>
<h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5 参考资料"></a>5 参考资料</h2><ul>
<li>py2exe lxml error <a href="http://stackoverflow.com/a/5309733" target="_blank" rel="external">http://stackoverflow.com/a/5309733</a></li>
<li>Creating an Executable from a Python Script | Matt Borgerson<br><a href="https://mborgerson.com/creating-an-executable-from-a-python-script" target="_blank" rel="external">https://mborgerson.com/creating-an-executable-from-a-python-script</a></li>
<li>pyinstaller打包pyqt文件 - dcb3688 - 博客园<br><a href="http://www.cnblogs.com/dcb3688/p/4211390.html" target="_blank" rel="external">http://www.cnblogs.com/dcb3688/p/4211390.html</a></li>
<li>使用pyinstaller打包python程序 - 魏哲的空间<br><a href="https://blog.weizhe.net/?p=412" target="_blank" rel="external">https://blog.weizhe.net/?p=412</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了py2exe、cx_freeze和PyInstaller这三种Python打包工具的使用方法。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://kinegratii.github.io/tags/Python/"/>
    
      <category term="构建" scheme="http://kinegratii.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>The Zen of Python</title>
    <link href="http://kinegratii.github.io/2016/03/02/the-zen-of-python/"/>
    <id>http://kinegratii.github.io/2016/03/02/the-zen-of-python/</id>
    <published>2016-03-02T02:03:32.000Z</published>
    <updated>2016-11-22T11:36:36.451Z</updated>
    
    <content type="html"><![CDATA[<p>The Zen of Python 是Python隐藏的彩蛋，输入<code>import this</code>即可显示出来。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">The Zen of Python, by Tim Peters</div><div class="line"></div><div class="line">Beautiful is better than ugly.</div><div class="line">Explicit is better than implicit.</div><div class="line">Simple is better than complex.</div><div class="line">Complex is better than complicated.</div><div class="line">Flat is better than nested.</div><div class="line">Sparse is better than dense.</div><div class="line">Readability counts.</div><div class="line">Special cases aren&apos;t special enough to break the rules.</div><div class="line">Although practicality beats purity.</div><div class="line">Errors should never pass silently.</div><div class="line">Unless explicitly silenced.</div><div class="line">In the face of ambiguity, refuse the temptation to guess.</div><div class="line">There should be one-- and preferably only one --obvious way to do it.</div><div class="line">Although that way may not be obvious at first unless you&apos;re Dutch.</div><div class="line">Now is better than never.</div><div class="line">Although never is often better than *right* now.</div><div class="line">If the implementation is hard to explain, it&apos;s a bad idea.</div><div class="line">If the implementation is easy to explain, it may be a good idea.</div><div class="line">Namespaces are one honking great idea -- let&apos;s do more of those!</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Zen of Python 是Python隐藏的彩蛋，输入&lt;code&gt;import this&lt;/code&gt;即可显示出来。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://kinegratii.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pytz东八区6分钟问题</title>
    <link href="http://kinegratii.github.io/2015/11/12/python-pytz-6-minutes/"/>
    <id>http://kinegratii.github.io/2015/11/12/python-pytz-6-minutes/</id>
    <published>2015-11-12T13:47:00.000Z</published>
    <updated>2016-11-01T12:53:44.931Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pytz库中 <code>Asia/Shanghai</code>时区相差6分钟的问题。</p>
<a id="more"></a>
<p>之前也一直没有注意到这个问题，最近的项目需要同时显示DTU设备时间和服务器时间，才发现设备时间总是少6-7分钟。<br>在项目中，两者解析成datetime对象的使用方法不一样：</p>
<ul>
<li>服务器用的是Django框架，使用了django.utils.timezone.now函数解析服务器当前时间</li>
<li>DTU则是自己通过构造函数创建的，时区用的是pytz.timezone(‘Asia/Shanghai’)</li>
</ul>
<p>首先在一篇文章<a href="http://www.keakon.net/2010/12/14/%E7%94%A8datetime%E5%92%8Cpytz%E6%9D%A5%E8%BD%AC%E6%8D%A2%E6%97%B6%E5%8C%BA" target="_blank" rel="external">《用datetime和pytz来转换时区》</a>中说可以用台北时间（Asia/Taipei），试验下发现台北时间也有6分钟的问题。为了测试通过临时强制加上了6分钟，才勉强通过测试，然而这不是长久之计。</p>
<p>晚上下班时回家用“pytz 6分钟”搜索发现了<a href="http://www.laonan.net/blog/G681_FUNEeWTK_79rf__Vw/" target="_blank" rel="external">《python中pytz,东8区,6分钟问题 - 老楠老楠》</a>这篇文章。<strong>根据文章的描述，用localize函数就可以了。</strong></p>
<p>使用datetime直接构造时间的时候，设置时区是没有北京时间的，一般来说习惯了linux的同志都会默认用上海时间来代替，这里却有一个问题，如果要进行时区转换，上海时间比北京时间差6分钟。。。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tz = pytz.timezone(&apos;Asia/Shanghai&apos;)</div><div class="line">t = datetime.datetime(2015, 9, 5, 9, 0, 0, 0, tzinfo=tz)</div></pre></td></tr></table></figure>
<p>这样打印出来得到的时间是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2015-09-07 09:00:00+08:06</div></pre></td></tr></table></figure>
<p>在django框架中，貌似from django.utils.timezone import localtime的这个localtime会修正那6分钟，这问题就来了，要自己在程序里构造时间，并且跟用这个localtime转化的时间对比的时候巨麻烦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pytz库中 &lt;code&gt;Asia/Shanghai&lt;/code&gt;时区相差6分钟的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="pytz" scheme="http://kinegratii.github.io/tags/pytz/"/>
    
  </entry>
  
  <entry>
    <title>djcelery实践</title>
    <link href="http://kinegratii.github.io/2015/10/22/djcelery-practice/"/>
    <id>http://kinegratii.github.io/2015/10/22/djcelery-practice/</id>
    <published>2015-10-22T02:17:40.000Z</published>
    <updated>2016-11-22T11:36:36.342Z</updated>
    
    <content type="html"><![CDATA[<p>Celery是一个异步任务队列/基于分布式消息传递的作业队列。Celery通过消息（message）进行通信，使用代理（broker）在客户端和工作执行者之间进行交互。当开始一个任务时，客户端发送消息到队列并由代理将其发往响应的工作执行者处。。djcelery是其和Django框架一个很方便使用的第三方包。</p>
<a id="more"></a>
<h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1 环境配置"></a>1 环境配置</h2><h3 id="1-1-安装ERLang"><a href="#1-1-安装ERLang" class="headerlink" title="1.1 安装ERLang"></a>1.1 安装ERLang</h3><ol>
<li>首先是到ERLang官网去下载ERlang可执行文件  地址：<a href="http://www.erlang.org/download.html" target="_blank" rel="external">http://www.erlang.org/download.html</a></li>
<li>然后安装ERLang。</li>
<li>然后设置ERLang的环境变量。</li>
<li>在环境变量中加入 <code>ERL_HOME = erlang安装目录</code></li>
<li>在path中添加 <code>%ERL_HOME%\bin</code></li>
</ol>
<h3 id="1-2-安装rabbitmq"><a href="#1-2-安装rabbitmq" class="headerlink" title="1.2 安装rabbitmq"></a>1.2 安装rabbitmq</h3><p>从<a href="http://www.rabbitmq.com/releases/rabbitmq-server/v3.1.5/rabbitmq-server-3.1.5.exe下载rabbitmq-server" target="_blank" rel="external">http://www.rabbitmq.com/releases/rabbitmq-server/v3.1.5/rabbitmq-server-3.1.5.exe下载rabbitmq-server</a> 并安装。</p>
<p> 点击开始菜单中的 rabbitmq-start ，rabbitmq-server就启动了，在管理工具-服务中可以看到相关信息的。</p>
<h3 id="1-3-安装Djcelery"><a href="#1-3-安装Djcelery" class="headerlink" title="1.3 安装Djcelery"></a>1.3 安装Djcelery</h3><p>和大多数Python第三方包一样，用 pip安装celery和djcelery两个包。djcelery依赖于djcelery，所以只要执行pip install djcelery命令即可。</p>
<h2 id="2-配置Djcelery"><a href="#2-配置Djcelery" class="headerlink" title="2 配置Djcelery"></a>2 配置Djcelery</h2><p>主要步骤</p>
<ul>
<li>在settings配置相关参数</li>
<li>定义任务</li>
<li>执行任务，可以在程序中调用执行，也可交给后台周期性执行</li>
</ul>
<h3 id="2-1-基本配置"><a href="#2-1-基本配置" class="headerlink" title="2.1 基本配置"></a>2.1 基本配置</h3><p>下面是Djcelery的有关配置，定义在Django项目的settings模块内。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#... ...</span></div><div class="line"></div><div class="line">INSTALLED_APPS = (</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.sites'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">    <span class="comment"># Uncomment the next line to enable the admin:</span></div><div class="line">    <span class="string">'django.contrib.admin'</span>,</div><div class="line">    <span class="comment"># Uncomment the next line to enable admin documentation:</span></div><div class="line">    <span class="comment"># 'django.contrib.admindocs',</span></div><div class="line">    <span class="string">'djcelery'</span>,  <span class="comment">#添加djcelery</span></div><div class="line">     <span class="string">'mrs_app'</span>,  <span class="comment">#自己的APP</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># ... ....</span></div><div class="line"><span class="comment"># 配置djcelery相关参数，ResultStore默认存储在数据库可不必重写 ，</span></div><div class="line"><span class="keyword">import</span> djcelery</div><div class="line">djcelery.setup_loader()</div><div class="line">BROKER_URL = <span class="string">'amqp://guest:guest@localhost:5672//'</span></div><div class="line"><span class="comment">#任务定义所在的模块</span></div><div class="line">CELERY_IMPORTS = (<span class="string">'mrs_app.my_celery.tasks'</span>, )</div><div class="line"><span class="comment"># 使用和Django一样的时区</span></div><div class="line">CELERY_TIMEZONE = TIME_ZONE</div><div class="line"></div><div class="line"><span class="comment">#以上为基本配置，以下为周期性任务定义，以celerybeat_开头的  </span></div><div class="line"></div><div class="line">CELERYBEAT_SCHEDULER = <span class="string">'djcelery.schedulers.DatabaseScheduler'</span></div><div class="line"></div><div class="line"><span class="comment">#CELERYBEAT_SCHEDULE = &#123;</span></div><div class="line"><span class="comment">#    'add-every-3-minutes': &#123;</span></div><div class="line"><span class="comment">#        'task': 'mrs_app.my_celery.tasks.monthly_reading_task',</span></div><div class="line"><span class="comment">#        'schedule': timedelta(minutes=3)</span></div><div class="line"><span class="comment">#    &#125;,</span></div><div class="line"><span class="comment">#&#125;</span></div></pre></td></tr></table></figure>
<h2 id="2-2-定义任务"><a href="#2-2-定义任务" class="headerlink" title="2.2 定义任务"></a>2.2 定义任务</h2><p>有两种格式</p>
<ul>
<li>类定义：一个继承了celery.app.task的类并实现了run方法</li>
<li>函数定义：@task装饰的函数</li>
</ul>
<p>通过实现task相关方法可以实现更多的逻辑，比如成功回调、错误处理、重试机制等，以下是最基本的定义方式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mrs_app.my_celery.tasks.py</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</div><div class="line"></div><div class="line">```python</div><div class="line"></div><div class="line"><span class="comment">#第一种，函数方式  </span></div><div class="line"><span class="meta"> @task(name='monthly_reading')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">monthly_reading_task</span><span class="params">()</span>:</span></div><div class="line">    task_obj = MonthlyReading(debug=<span class="keyword">False</span>)</div><div class="line">    task_obj.start()</div><div class="line"></div><div class="line"><span class="comment">#第二种，类定义</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MonthlyReadingTask</span><span class="params">(Task)</span>:</span></div><div class="line">    name=<span class="string">'monthly_reading'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        task_obj = MonthlyReading(debug=<span class="keyword">False</span>)</div><div class="line">        task_obj.start()</div></pre></td></tr></table></figure>
<h3 id="2-3-启动"><a href="#2-3-启动" class="headerlink" title="2.3 启动"></a>2.3 启动</h3><ul>
<li>启动 <code>python manage.py celery worker -l info</code></li>
<li>如果有定时任务的话，还需要启动心跳<ul>
<li>另开一个cmd窗口 <code>python manage.py celery beat</code>  （windows下-B选项不可用）</li>
</ul>
</li>
</ul>
<h2 id="3-执行任务"><a href="#3-执行任务" class="headerlink" title="3 执行任务"></a>3 执行任务</h2><h3 id="3-1-直接调用"><a href="#3-1-直接调用" class="headerlink" title="3.1 直接调用"></a>3.1 直接调用</h3><p>自己在代码中的调用，支持延迟/同步/异步调用，可参考task类定义，例子见参考资料的《使用django+celery+RabbitMQ实现异步执行》。</p>
<h3 id="3-2-周期性调用"><a href="#3-2-周期性调用" class="headerlink" title="3.2 周期性调用"></a>3.2 周期性调用</h3><p>这种由djcelery调用，所以需要在<code>settings.CELERYBEAT_SCHEDULER</code>设置一个调度器，这里使用数据库。</p>
<p>djcelery提供了一些Model（定义在<code>djcelery/models.py</code>文件）</p>
<p>说明：</p>
<ul>
<li>任务和定时任务的区别：定时任务 = 任务 + intervalschedule/crontabschedule 。两个定时任务可以执行同一个任务。</li>
<li>任务没有相应的Model，用字符串表示，即periodictask模型的task字段</li>
<li>定时任务有相应的Model即periodictask。</li>
<li><p>djcelery在初始化中主要完成两件：</p>
</li>
<li><p>在<code>settings.CELERY_IMPORTS</code>定义下的模块搜索所有任务。这个对数据库没有任何改变，只是用Admin添加定时任务时periodictask.task字段变成选择框，列出了所有定义的任务。</p>
</li>
<li><p>从settings.CELERYBEAT_SCHEDULE创建定时任务，这个会创建数据记录，相当于<code>celery_models.PeriodicTask.objects.create(..)</code>语句。</p>
</li>
</ul>
<h3 id="3-3-创建定时任务"><a href="#3-3-创建定时任务" class="headerlink" title="3.3 创建定时任务"></a>3.3 创建定时任务</h3><p>通过它提供的Model Query API来操作，同平常的数据库查询一样。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> djcelery <span class="keyword">import</span> models <span class="keyword">as</span> celery_models</div><div class="line"></div><div class="line">celery_models.PeriodicTask.objects.create(...)</div><div class="line">celery_models.PeriodicTask.ojects.get(name=<span class="string">'add'</span>)</div><div class="line">....</div></pre></td></tr></table></figure>
<p>djcelery提供了admin管理界面，访问<code>http://localhost:8000/admin/djcelery/</code> 即可，在这里可以对定时任务进行增删改查，具体和Django admin一样。</p>
<p>注：当我们修改任务的设置后，比如关闭、更改时间后不用重启celery服务等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Celery是一个异步任务队列/基于分布式消息传递的作业队列。Celery通过消息（message）进行通信，使用代理（broker）在客户端和工作执行者之间进行交互。当开始一个任务时，客户端发送消息到队列并由代理将其发往响应的工作执行者处。。djcelery是其和Django框架一个很方便使用的第三方包。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Celery" scheme="http://kinegratii.github.io/tags/Celery/"/>
    
  </entry>
  
  <entry>
    <title>Python IP归属地查询</title>
    <link href="http://kinegratii.github.io/2015/08/30/python-ip-query/"/>
    <id>http://kinegratii.github.io/2015/08/30/python-ip-query/</id>
    <published>2015-08-30T14:04:21.000Z</published>
    <updated>2016-11-19T23:56:27.028Z</updated>
    
    <content type="html"><![CDATA[<p>基于Python3.2 + tkinter + 淘宝IP API的IP归属地查询。</p>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">import</span> json</div><div class="line">item = (<span class="string">'country'</span>,<span class="string">'area'</span>,<span class="string">'region'</span>,<span class="string">'city'</span>,<span class="string">'isp'</span>)</div><div class="line">itemVar = (<span class="string">'国家'</span>,<span class="string">'地区'</span>,<span class="string">'省'</span>,<span class="string">'市'</span>,<span class="string">'运营商'</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MWindow</span><span class="params">(Frame)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        Frame.__init__(self)</div><div class="line">        self.master.title(<span class="string">'IPSearch'</span>)</div><div class="line">        self.master.geometry(<span class="string">'700x400'</span>)</div><div class="line">        self.pack(side = TOP,expand = YES,fill = BOTH)</div><div class="line">        ioPut = &#123;&#125;</div><div class="line">        ioPut[<span class="string">'ip_input'</span>] = StringVar()</div><div class="line">        ioPut[<span class="string">'result_ouput'</span>] = StringVar()</div><div class="line">        res = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> vx <span class="keyword">in</span> item:</div><div class="line">            res[vx] = StringVar()</div><div class="line">        <span class="comment"># top Frame</span></div><div class="line">        topF = self.createFrame(self,TOP)</div><div class="line">        inL = self.createLabel(topF,TOP,<span class="string">'请输入IP地址：'</span>)</div><div class="line">        ipE = self.createEntry(topF,TOP,ioPut[<span class="string">'ip_input'</span>])</div><div class="line">        resL = self.createLabel(topF,TOP,<span class="string">'查询结果：'</span>)</div><div class="line">        resE = self.createEntry(topF,TOP,ioPut[<span class="string">'result_ouput'</span>])</div><div class="line">        <span class="comment">#mid Frame</span></div><div class="line">        midF = self.createFrame(self,TOP)</div><div class="line">        i = <span class="number">0</span></div><div class="line">        l = len(item)</div><div class="line">        <span class="keyword">while</span> i &lt; l:</div><div class="line">            L = self.createLabel(midF,LEFT,itemVar[i])</div><div class="line">            E = self.createEntry(midF,LEFT,res[item[i]])</div><div class="line">            i = i + <span class="number">1</span></div><div class="line">        <span class="comment">#bottom Frame</span></div><div class="line">        botF = self.createFrame(self,TOP)</div><div class="line">        searchB = Button(botF,text = <span class="string">'search'</span>,</div><div class="line">                         command = <span class="keyword">lambda</span> ioPut = ioPut,res = res:self.IpSearch(ioPut,res))</div><div class="line">        searchB.pack(side = TOP,expand = YES,fill = BOTH)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createFrame</span><span class="params">(self,parent,side)</span>:</span></div><div class="line">        f = Frame(parent)</div><div class="line">        f.pack(side = side,expand = YES,fill = BOTH)</div><div class="line">        <span class="keyword">return</span> f</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createLabel</span><span class="params">(self,parent,side,text)</span>:</span></div><div class="line">        l = Label(parent,text = text)</div><div class="line">        l.pack(side = side,expand = YES)</div><div class="line">        <span class="keyword">return</span> l</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createEntry</span><span class="params">(self,parent,side,textvariable)</span>:</span></div><div class="line">        e = Entry(parent,relief = SUNKEN,textvariable = textvariable,width = <span class="number">15</span>)</div><div class="line">        e.pack(side = side,expand = NO)</div><div class="line">        <span class="keyword">return</span> e</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">IpSearch</span><span class="params">(self,ioPut,res)</span>:</span></div><div class="line">        ipRex = <span class="string">'((?:(?:25[0-5]|2[0-4]\d|((1\d&#123;2&#125;)|([1-9]?\d)))\.)&#123;3&#125;(?:25[0-5]|2[0-4]\d|((1\d&#123;2&#125;)|([1-9]?\d))))'</span></div><div class="line">        ip = ioPut[<span class="string">'ip_input'</span>].get()</div><div class="line">        tmp = re.findall(re.compile(ipRex),ip)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tmp:</div><div class="line">            ioPut[<span class="string">'result_ouput'</span>].set(<span class="string">'ip格式错误，请重新输入'</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        reponseData = IpS().searchByTaobao(ip)</div><div class="line">        data = json.loads(reponseData)</div><div class="line">        <span class="keyword">if</span> data[<span class="string">'code'</span>] == <span class="number">0</span>:</div><div class="line">            ioPut[<span class="string">'result_ouput'</span>].set(<span class="string">'该IP所在位置如下'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            ioPut[<span class="string">'result_ouput'</span>].set(<span class="string">'找不到相关信息'</span>)</div><div class="line">        d = data[<span class="string">'data'</span>]</div><div class="line">        <span class="keyword">for</span> vx <span class="keyword">in</span> item:</div><div class="line">            res[vx].set(d[vx])</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpS</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.apiUrlTaobao = <span class="string">'http://ip.taobao.com/service/getIpInfo.php?ip='</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchByTaobao</span><span class="params">(self,ip)</span>:</span></div><div class="line">        headers = (<span class="string">'User-Agent'</span>,<span class="string">'Mozilla/5.0 (Windows NT 5.1; rv:14.0) Gecko/20100101 Firefox/14.0.1'</span>)</div><div class="line">        opener = urllib.request.build_opener()</div><div class="line">        opener.addheaders = [headers]</div><div class="line">        data = opener.open(self.apiUrlTaobao+ip).read()</div><div class="line">        data = data.decode(<span class="string">'UTF-8'</span>)</div><div class="line">        <span class="keyword">return</span> data</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    MWindow().mainloop()</div></pre></td></tr></table></figure>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/python-ip-query.png" alt="pythonIP归属地查询"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于Python3.2 + tkinter + 淘宝IP API的IP归属地查询。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://kinegratii.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
